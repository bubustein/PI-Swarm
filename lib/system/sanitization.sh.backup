#!/bin/bash
# System Sanitization and Cleaning Module
# Provides comprehensive system cleaning and sanitization before deployment

# Basic logging function if not already defined
if ! type log >/dev/null 2>&1; then
    log() {
        local level="$1"
        shift
        local message="$*"
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "${timestamp} [${level}] ${message}"
    }
fi

# Basic SSH execution function if not already defined
if ! type ssh_exec >/dev/null 2>&1; then
    ssh_exec() {
        local host="$1"
        local user="$2"
        local pass="$3"
        shift 3
        local command="$*"
        
        if [[ -n "$pass" ]]; then
            sshpass -p "$pass" ssh -o StrictHostKeyChecking=no "$user@$host" "$command"
        else
            ssh -o BatchMode=yes "$user@$host" "$command"
        fi
    }
fi

# Perform comprehensive system sanitization
sanitize_system() {
    local host="$1"
    local user="$2"
    local pass="$3"
    local sanitization_level="${4:-standard}"  # minimal, standard, thorough, complete
    
    log INFO "🧹 Starting system sanitization on $host (level: $sanitization_level)..."
    
    case "$sanitization_level" in
        "minimal")
            sanitize_minimal "$host" "$user" "$pass"
            ;;
        "standard")
            sanitize_standard "$host" "$user" "$pass"
            ;;
        "thorough")
            sanitize_thorough "$host" "$user" "$pass"
            ;;
        "complete")
            sanitize_complete "$host" "$user" "$pass"
            ;;
        *)
            log ERROR "Invalid sanitization level: $sanitization_level"
            return 1
            ;;
    esac
}

# Minimal sanitization - basic cleanup only
sanitize_minimal() {
    local host="$1"
    local user="$2"
    local pass="$3"
    
    log INFO "📦 Performing minimal sanitization on $host..."
    
    # Use comprehensive APT cleanup
    cleanup_apt_system "$host" "$user" "$pass"
        
        # Clear temporary files
        sudo find /tmp -type f -atime +1 -delete 2>/dev/null || true
        sudo find /var/tmp -type f -atime +1 -delete 2>/dev/null || true
        
        # Basic log cleanup (keep last 3 days)
        sudo journalctl --vacuum-time=3d 2>/dev/null || true
    " && log INFO "✅ Minimal sanitization completed on $host"
}

# Standard sanitization - recommended for most deployments
sanitize_standard() {
    local host="$1"
    local user="$2"
    local pass="$3"
    
    log INFO "🔧 Performing standard sanitization on $host..."
    
    # Use comprehensive APT cleanup
    cleanup_apt_system "$host" "$user" "$pass"
    
    ssh_exec "$host" "$user" "$pass" "
        echo '=== STANDARD SANITIZATION START ==='
        
        # Comprehensive temporary file cleanup
        echo 'Cleaning temporary files...'
        sudo find /tmp -type f -atime +0 -delete 2>/dev/null || true
        sudo find /var/tmp -type f -atime +0 -delete 2>/dev/null || true
        sudo find /var/cache -type f -atime +7 -delete 2>/dev/null || true
        
        # Log cleanup (keep last 7 days)
        echo 'Cleaning system logs...'
        sudo journalctl --vacuum-time=7d 2>/dev/null || true
        sudo find /var/log -type f -name '*.log' -mtime +7 -delete 2>/dev/null || true
        sudo find /var/log -type f -name '*.gz' -mtime +7 -delete 2>/dev/null || true
        
        # Clean user caches
        echo 'Cleaning user caches...'
        rm -rf ~/.cache/* 2>/dev/null || true
        rm -rf ~/.thumbnails/* 2>/dev/null || true
        
        # Docker cleanup (if installed)
        if command -v docker >/dev/null 2>&1; then
            echo 'Cleaning Docker resources...'
            sudo docker system prune -f 2>/dev/null || true
            sudo docker volume prune -f 2>/dev/null || true
            sudo docker network prune -f 2>/dev/null || true
        fi
        
        # Clear shell history (optional, preserves current session)
        history -c 2>/dev/null || true
        
        # Clear swap if enabled
        if [ -f /proc/swaps ] && grep -q '/dev' /proc/swaps; then
            echo 'Clearing swap...'
            sudo swapoff -a && sudo swapon -a
        fi
        
        echo '=== STANDARD SANITIZATION COMPLETE ==='
    " && log INFO "✅ Standard sanitization completed on $host"
}

# Thorough sanitization - aggressive cleanup
sanitize_thorough() {
    local host="$1"
    local user="$2"
    local pass="$3"
    
    log INFO "🔥 Performing thorough sanitization on $host..."
    
    ssh_exec "$host" "$user" "$pass" '
        echo "=== THOROUGH SANITIZATION START ==="
        
        # Comprehensive apt cleanup first
        echo "Running comprehensive apt cleanup..."
        export DEBIAN_FRONTEND=noninteractive
        sudo -E apt-get -y -q autoremove 2>/dev/null || true
        sudo -E apt-get -y -q autoclean 2>/dev/null || true
        sudo -E apt-get -y -q clean 2>/dev/null || true
        sudo dpkg --configure -a 2>/dev/null || true
        
        # Standard cleanup operations
        echo "Running standard cleanup operations..."
        
        # Clear package cache
        sudo rm -rf /var/cache/apt/archives/*.deb 2>/dev/null || true
        sudo rm -rf /var/lib/apt/lists/* 2>/dev/null || true
        sudo apt-get update -qq 2>/dev/null || true
        
        # Clean temporary files
        sudo rm -rf /tmp/* 2>/dev/null || true
        sudo rm -rf /var/tmp/* 2>/dev/null || true
        
        # Clean old cache files
        sudo find /var/cache -type f -atime +7 -delete 2>/dev/null || true
        
        # Log cleanup (keep last 7 days)
        echo "Cleaning system logs..."
        sudo journalctl --vacuum-time=7d 2>/dev/null || true
        sudo find /var/log -type f -name "*.log" -mtime +7 -delete 2>/dev/null || true
        sudo find /var/log -type f -name "*.gz" -mtime +7 -delete 2>/dev/null || true
        
        # Clean user caches
        echo "Cleaning user caches..."
        rm -rf ~/.cache/* 2>/dev/null || true
        rm -rf ~/.thumbnails/* 2>/dev/null || true
        
        # Docker cleanup (if installed)
        if command -v docker >/dev/null 2>&1; then
            echo "Cleaning Docker resources..."
            sudo docker system prune -f 2>/dev/null || true
            sudo docker volume prune -f 2>/dev/null || true
            sudo docker network prune -f 2>/dev/null || true
        fi
        
        # Additional thorough cleanup
        echo "Performing additional thorough cleanup..."
        
        # Remove old kernels (keep current + 1 previous)
        if command -v apt-get >/dev/null 2>&1; then
            echo "Removing old kernels..."
            sudo apt-get autoremove --purge -y 2>/dev/null || true
        fi
        
        # Deep log cleanup
        echo "Deep log cleanup..."
        sudo find /var/log -type f -exec truncate -s 0 {} \; 2>/dev/null || true
        sudo journalctl --vacuum-size=10M 2>/dev/null || true
        
        # Clear systemd journals
        sudo rm -rf /var/log/journal/*/* 2>/dev/null || true
        
        # Remove crash dumps
        echo "Removing crash dumps..."
        sudo rm -rf /var/crash/* 2>/dev/null || true
        sudo rm -rf /var/lib/systemd/coredump/* 2>/dev/null || true
        
        # Clear browser caches (if any)
        rm -rf ~/.mozilla/firefox/*/Cache* 2>/dev/null || true
        rm -rf ~/.cache/chromium 2>/dev/null || true
        
        # Clear Python caches
        find /home -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find /home -name "*.pyc" -delete 2>/dev/null || true
        
        # Clear thumbnail caches
        rm -rf ~/.thumbnails 2>/dev/null || true
        rm -rf ~/.cache/thumbnails 2>/dev/null || true
        
        # Remove rotated logs
        sudo find /var/log -name "*.1" -delete 2>/dev/null || true
        sudo find /var/log -name "*.old" -delete 2>/dev/null || true
        
        # Memory cleanup
        echo "Clearing memory caches..."
        sudo sync
        echo 3 | sudo tee /proc/sys/vm/drop_caches >/dev/null 2>&1 || true
        
        echo "=== THOROUGH SANITIZATION COMPLETE ==="
    ' && log INFO "✅ Thorough sanitization completed on $host"
}

# Complete sanitization - maximum cleanup (use with caution)
sanitize_complete() {
    local host="$1"
    local user="$2"
    local pass="$3"
    
    log WARN "💀 Performing COMPLETE sanitization on $host - this is irreversible!"
    echo "⚠️  DANGER: Complete sanitization will remove ALL user data, logs, and caches."
    echo "   This operation is irreversible and should only be used on fresh systems."
    read -p "Are you absolutely sure you want to proceed? (type YES to confirm): " confirm
    
    if [[ "$confirm" != "YES" ]]; then
        log INFO "Complete sanitization cancelled by user"
        return 0
    fi
    
    ssh_exec "$host" "$user" "$pass" '
        echo "=== COMPLETE SANITIZATION START ==="
        echo "WARNING: This will remove ALL user data and system caches!"
        
        # First run thorough cleanup
        echo "Running thorough cleanup..."
        
        # Comprehensive apt cleanup
        echo "Comprehensive apt system cleanup..."
        export DEBIAN_FRONTEND=noninteractive
        sudo -E apt-get -y -q autoremove 2>/dev/null || true
        sudo -E apt-get -y -q autoclean 2>/dev/null || true
        sudo -E apt-get -y -q clean 2>/dev/null || true
        sudo dpkg --configure -a 2>/dev/null || true
        
        # Clear all package caches
        sudo rm -rf /var/cache/apt/* 2>/dev/null || true
        sudo rm -rf /var/lib/apt/lists/* 2>/dev/null || true
        
        # Comprehensive log cleanup
        echo "Comprehensive log cleanup..."
        sudo journalctl --vacuum-time=1d 2>/dev/null || true
        sudo find /var/log -type f -name "*.log*" -delete 2>/dev/null || true
        sudo find /var/log -type f -name "*.gz" -delete 2>/dev/null || true
        sudo find /var/log -name "*.1" -delete 2>/dev/null || true
        sudo find /var/log -name "*.old" -delete 2>/dev/null || true
        
        # Nuclear cleanup - removes everything possible
        echo "Performing nuclear cleanup..."
        
        # Remove all user data in /home (except current user)
        for home_dir in /home/*; do
            if [ "$(basename "$home_dir")" != "'"$user"'" ]; then
                echo "Removing $home_dir..."
                sudo rm -rf "$home_dir" 2>/dev/null || true
            fi
        done
        
        # Clear current user data (preserve essential config)
        echo "Clearing current user data..."
        cd ~
        find . -maxdepth 1 -name ".*" ! -name ".ssh" ! -name ".profile" ! -name ".bashrc" ! -name ".bash_history" -exec rm -rf {} + 2>/dev/null || true
        
        # Remove all logs completely
        echo "Removing all logs..."
        sudo find /var/log -type f -delete 2>/dev/null || true
        sudo rm -rf /var/log/* 2>/dev/null || true
        
        # Clear all temporary directories
        sudo rm -rf /tmp/* 2>/dev/null || true
        sudo rm -rf /var/tmp/* 2>/dev/null || true
        
        # Remove package caches completely
        sudo rm -rf /var/cache/* 2>/dev/null || true
        
        # Clear mail spools
        sudo rm -rf /var/mail/* 2>/dev/null || true
        sudo rm -rf /var/spool/mail/* 2>/dev/null || true
        
        # Remove cron logs
        sudo rm -rf /var/spool/cron/* 2>/dev/null || true
        
        # Clear system state
        sudo rm -rf /var/lib/dhcp/* 2>/dev/null || true
        sudo rm -rf /var/lib/cache/* 2>/dev/null || true
        
        # Reset network configuration to defaults
        echo "Resetting network state..."
        sudo rm -rf /var/lib/NetworkManager/* 2>/dev/null || true
        
        # Clear command history completely
        history -c
        history -w
        > ~/.bash_history
        
        # Final memory and disk cleanup
        sudo sync
        echo 3 | sudo tee /proc/sys/vm/drop_caches >/dev/null 2>&1 || true
        
        echo "=== COMPLETE SANITIZATION FINISHED ==="
        echo "System has been completely sanitized. Reboot recommended."
    ' && log INFO "✅ Complete sanitization finished on $host"
    
    log WARN "🔄 REBOOT RECOMMENDED for $host after complete sanitization"
}

# Pre-deployment sanitization with user choice
interactive_sanitization() {
    local hosts=("$@")
    
    echo ""
    echo "🧹 System Sanitization Options"
    echo "==============================="
    echo "Choose sanitization level for target systems:"
    echo ""
    echo "1. 📦 Minimal    - Basic cleanup (package cache, temp files)"
    echo "2. 🔧 Standard   - Recommended cleanup (logs, caches, Docker cleanup)"
    echo "3. 🔥 Thorough   - Aggressive cleanup (old kernels, deep log cleanup)"
    echo "4. 💀 Complete   - Nuclear cleanup (removes ALL user data - DANGEROUS)"
    echo "5. ❌ Skip       - No sanitization"
    echo ""
    
    while true; do
        read -p "Select sanitization level (1-5): " choice
        case $choice in
            1)
                SANITIZATION_LEVEL="minimal"
                echo "✅ Minimal sanitization selected"
                break
                ;;
            2)
                SANITIZATION_LEVEL="standard"
                echo "✅ Standard sanitization selected"
                break
                ;;
            3)
                SANITIZATION_LEVEL="thorough"
                echo "✅ Thorough sanitization selected"
                break
                ;;
            4)
                SANITIZATION_LEVEL="complete"
                echo "⚠️  Complete sanitization selected - USE WITH EXTREME CAUTION"
                break
                ;;
            5)
                SANITIZATION_LEVEL="skip"
                echo "❌ Sanitization will be skipped"
                return 0
                ;;
            *)
                echo "❌ Invalid choice. Please select 1-5."
                ;;
        esac
    done
    
    if [[ "$SANITIZATION_LEVEL" != "skip" ]]; then
        echo ""
        echo "🚀 Starting sanitization process..."
        for host in "${hosts[@]}"; do
            sanitize_system "$host" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "$SANITIZATION_LEVEL"
        done
        echo "✅ Sanitization process completed for all hosts"
    fi
}

# Generate sanitization report
generate_sanitization_report() {
    local host="$1"
    local user="$2"
    local pass="$3"
    
    log INFO "📊 Generating sanitization report for $host..."
    
    ssh_exec "$host" "$user" "$pass" "
        echo '=== SANITIZATION REPORT FOR $host ==='
        echo 'Generated on: $(date)'
        echo ''
        
        echo 'Disk Usage:'
        df -h / | tail -1 | awk '{print \"  Root partition: \" \$3 \" used, \" \$4 \" available (\" \$5 \" used)\"}'
        
        echo ''
        echo 'Memory Usage:'
        free -h | grep '^Mem:' | awk '{print \"  Memory: \" \$3 \" used, \" \$7 \" available\"}'
        
        echo ''
        echo 'System Load:'
        uptime | awk -F'load average:' '{print \"  Load average:\" \$2}'
        
        echo ''
        echo 'Package Cache Status:'
        if command -v apt-get >/dev/null 2>&1; then
            cache_size=\$(du -sh /var/cache/apt/archives 2>/dev/null | awk '{print \$1}' || echo '0B')
            echo \"  APT cache size: \$cache_size\"
        fi
        
        echo ''
        echo 'Temporary Files:'
        temp_size=\$(du -sh /tmp 2>/dev/null | awk '{print \$1}' || echo '0B')
        echo \"  /tmp size: \$temp_size\"
        
        echo ''
        echo 'Log Directory Size:'
        log_size=\$(du -sh /var/log 2>/dev/null | awk '{print \$1}' || echo '0B')
        echo \"  /var/log size: \$log_size\"
        
        if command -v docker >/dev/null 2>&1; then
            echo ''
            echo 'Docker Status:'
            echo \"  Docker images: \$(docker images -q 2>/dev/null | wc -l || echo '0')\"
            echo \"  Docker containers: \$(docker ps -aq 2>/dev/null | wc -l || echo '0')\"
            echo \"  Docker volumes: \$(docker volume ls -q 2>/dev/null | wc -l || echo '0')\"
        fi
        
        echo ''
        echo '=== END SANITIZATION REPORT ==='
    "
}

# Comprehensive APT cleanup with grub warning handling
cleanup_apt_system() {
    local host="$1"
    local user="$2"
    local pass="$3"
    
    log INFO "🧹 Performing comprehensive APT cleanup on $host..."
    
    ssh_exec "$host" "$user" "$pass" "
        # Set debconf to noninteractive mode to avoid prompts
        export DEBIAN_FRONTEND=noninteractive
        
        # Preconfigure grub-pc to avoid interactive prompts
        if dpkg -l | grep -q grub-pc; then
            echo 'grub-pc grub-pc/install_devices_empty boolean true' | sudo debconf-set-selections
            echo 'grub-pc grub-pc/install_devices string /dev/sda' | sudo debconf-set-selections
            echo 'grub-pc grub-pc/install_devices_disks_changed multiselect' | sudo debconf-set-selections
        fi
        
        # Clean package caches first
        sudo apt-get clean || true
        
        # Remove orphaned packages with proper grub handling
        log INFO 'Removing orphaned packages...'
        sudo apt-get autoremove -y --purge 2>/dev/null || {
            log WARN 'Standard autoremove failed, trying with force options...'
            sudo apt-get autoremove -y --purge --allow-remove-essential 2>/dev/null || true
        }
        
        # Clean package lists and caches again
        sudo apt-get autoclean || true
        
        # Remove partial packages
        sudo dpkg --configure -a || true
        sudo apt-get -f install -y || true
        
        # Final cleanup of downloaded packages
        sudo apt-get clean || true
        
        log INFO 'APT cleanup completed successfully'
    " || {
        log WARN "APT cleanup on $host completed with warnings (this is usually safe)"
        return 0  # Don't fail deployment for cleanup warnings
    }
}

# Export functions
export -f cleanup_apt_system sanitize_system sanitize_minimal sanitize_standard sanitize_thorough sanitize_complete
export -f interactive_sanitization generate_sanitization_report
