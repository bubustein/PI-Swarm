#!/bin/bash

# Pi-hole DNS Server Integration for Pi-Swarm
# Provides local DNS resolution and ad-blocking for the cluster

# Configuration variables
PIHOLE_IP="${PIHOLE_IP:-auto}"  # IP for Pi-hole server (auto = use first Pi)
PIHOLE_WEB_PASSWORD="${PIHOLE_WEB_PASSWORD:-}"  # Web interface password
PIHOLE_DNS_UPSTREAM="${PIHOLE_DNS_UPSTREAM:-1.1.1.1,8.8.8.8}"  # Upstream DNS servers
PIHOLE_DOMAIN="${PIHOLE_DOMAIN:-cluster.local}"  # Local domain name
PIHOLE_NETWORK_INTERFACE="${PIHOLE_NETWORK_INTERFACE:-auto}"  # Network interface

# Function to setup Pi-hole on designated Pi
setup_pihole_dns() {
    local pi_ips=("$@")
    local pihole_host="${PIHOLE_IP:-auto}"
    
    # Validate we have Pi IPs
    if [[ ${#pi_ips[@]} -eq 0 ]]; then
        log "ERROR" "No Pi IPs provided for Pi-hole setup"
        return 1
    fi
    
    # Auto-select first Pi if not specified
    if [[ "$pihole_host" == "auto" ]]; then
        pihole_host="${pi_ips[0]}"
        log INFO "Auto-selected Pi-hole host: $pihole_host"
    fi
    
    log INFO "🌐 Setting up Pi-hole DNS server on $pihole_host"
    
    # Phase 1: Install Pi-hole
    log INFO "Phase 1: Installing Pi-hole..."
    if ! ssh_exec "$pihole_host" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
        # Update system
        sudo apt-get update -qq
        
        # Install required packages
        sudo apt-get install -y curl wget
        
        # Download and prepare Pi-hole installer
        curl -sSL https://install.pi-hole.net | sudo bash /dev/stdin --unattended \
            --pihole-password='${PIHOLE_WEB_PASSWORD:-piswarm123}' \
            --dns-1='${PIHOLE_DNS_UPSTREAM%%,*}' \
            --dns-2='${PIHOLE_DNS_UPSTREAM##*,}'
        
        # Enable Pi-hole service
        sudo systemctl enable pihole-FTL
        sudo systemctl start pihole-FTL
        
        echo 'Pi-hole installation completed'
    "; then
        log ERROR "Failed to install Pi-hole on $pihole_host"
        return 1
    fi
    
    log INFO "✅ Pi-hole installed on $pihole_host"
    
    # Phase 2: Configure local DNS entries
    log INFO "Phase 2: Configuring local DNS entries..."
    
    # Create local DNS entries for all Pis
    local dns_entries=""
    for i in "${!pi_ips[@]}"; do
        local pi_ip="${pi_ips[$i]}"
        local hostname="${PI_HOSTNAMES[$i]:-pi-node-$((i+1))}"
        dns_entries+="$pi_ip $hostname.$PIHOLE_DOMAIN $hostname\n"
    done
    
    # Add cluster service entries
    dns_entries+="$pihole_host portainer.$PIHOLE_DOMAIN\n"
    dns_entries+="$pihole_host grafana.$PIHOLE_DOMAIN\n"
    dns_entries+="$pihole_host prometheus.$PIHOLE_DOMAIN\n"
    dns_entries+="$pihole_host pihole.$PIHOLE_DOMAIN\n"
    
    if ! ssh_exec "$pihole_host" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
        # Create custom DNS entries
        echo -e '$dns_entries' | sudo tee -a /etc/pihole/custom.list >/dev/null
        
        # Update Pi-hole gravity (DNS cache)
        sudo pihole restartdns
        
        echo 'Local DNS entries configured'
    "; then
        log WARN "Failed to configure local DNS entries"
    fi
    
    # Phase 3: Configure all Pis to use Pi-hole as DNS
    log INFO "Phase 3: Configuring all Pis to use Pi-hole DNS..."
    
    for pi_ip in "${pi_ips[@]}"; do
        log INFO "  Configuring DNS on $pi_ip..."
        ssh_exec "$pi_ip" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
            # Backup original resolv.conf
            sudo cp /etc/resolv.conf /etc/resolv.conf.backup-\$(date +%Y%m%d)
            
            # Create new resolv.conf pointing to Pi-hole
            echo '# Generated by Pi-Swarm - Pi-hole DNS' | sudo tee /etc/resolv.conf >/dev/null
            echo 'nameserver $pihole_host' | sudo tee -a /etc/resolv.conf >/dev/null
            echo 'domain $PIHOLE_DOMAIN' | sudo tee -a /etc/resolv.conf >/dev/null
            echo 'search $PIHOLE_DOMAIN' | sudo tee -a /etc/resolv.conf >/dev/null
            
            # Make resolv.conf immutable to prevent overwriting
            sudo chattr +i /etc/resolv.conf
            
            echo 'DNS configuration updated to use Pi-hole'
        " || log WARN "Failed to configure DNS on $pi_ip"
    done
    
    # Phase 4: Configure Docker to use Pi-hole DNS
    log INFO "Phase 4: Configuring Docker to use Pi-hole DNS..."
    
    for pi_ip in "${pi_ips[@]}"; do
        ssh_exec "$pi_ip" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
            # Update Docker daemon configuration
            sudo mkdir -p /etc/docker
            
            # Read existing daemon.json or create new one
            if [[ -f /etc/docker/daemon.json ]]; then
                config=\$(cat /etc/docker/daemon.json)
            else
                config='{}'
            fi
            
            # Add DNS configuration to Docker daemon
            echo \"\$config\" | jq '. + {\"dns\": [\"$pihole_host\", \"1.1.1.1\"]}' | sudo tee /etc/docker/daemon.json >/dev/null
            
            # Restart Docker to apply DNS settings
            sudo systemctl restart docker
            
            echo 'Docker DNS configuration updated'
        " || log WARN "Failed to configure Docker DNS on $pi_ip"
    done
    
    # Phase 5: Test DNS resolution
    log INFO "Phase 5: Testing DNS resolution..."
    
    local test_passed=true
    for pi_ip in "${pi_ips[@]}"; do
        if ! ssh_exec "$pi_ip" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
            # Test Pi-hole is reachable
            if ! nslookup pihole.$PIHOLE_DOMAIN >/dev/null 2>&1; then
                echo 'Failed to resolve pihole.$PIHOLE_DOMAIN'
                exit 1
            fi
            
            # Test external DNS resolution
            if ! nslookup google.com >/dev/null 2>&1; then
                echo 'Failed to resolve external domains'
                exit 1
            fi
            
            echo 'DNS resolution test passed'
        "; then
            log WARN "DNS test failed on $pi_ip"
            test_passed=false
        fi
    done
    
    # Export Pi-hole configuration
    export PIHOLE_SERVER_IP="$pihole_host"
    export PIHOLE_WEB_URL="http://$pihole_host/admin"
    export CLUSTER_DOMAIN="$PIHOLE_DOMAIN"
    
    # Create Pi-hole configuration file
    mkdir -p "$PROJECT_ROOT/data"
    cat > "$PROJECT_ROOT/data/pihole-config.env" << EOF
# Generated Pi-hole DNS configuration
PIHOLE_SERVER_IP="$pihole_host"
PIHOLE_WEB_URL="http://$pihole_host/admin"
PIHOLE_WEB_PASSWORD="${PIHOLE_WEB_PASSWORD:-piswarm123}"
CLUSTER_DOMAIN="$PIHOLE_DOMAIN"
PIHOLE_CONFIGURED="true"
PIHOLE_SETUP_DATE="$(date)"
EOF
    
    if [[ "$test_passed" == "true" ]]; then
        log INFO "✅ Pi-hole DNS server setup completed successfully!"
        log INFO ""
        log INFO "🌐 DNS Configuration Summary:"
        log INFO "   • Pi-hole server: $pihole_host"
        log INFO "   • Web interface: http://$pihole_host/admin"
        log INFO "   • Admin password: ${PIHOLE_WEB_PASSWORD:-piswarm123}"
        log INFO "   • Local domain: $PIHOLE_DOMAIN"
        log INFO "   • Upstream DNS: $PIHOLE_DNS_UPSTREAM"
        log INFO ""
        log INFO "📋 Available hostnames:"
        for i in "${!pi_ips[@]}"; do
            local hostname="${PI_HOSTNAMES[$i]:-pi-node-$((i+1))}"
            log INFO "   • ${pi_ips[$i]} → $hostname.$PIHOLE_DOMAIN"
        done
        log INFO ""
        log INFO "🌍 Service URLs:"
        log INFO "   • Portainer: http://portainer.$PIHOLE_DOMAIN:9000"
        log INFO "   • Grafana: http://grafana.$PIHOLE_DOMAIN:3000"
        log INFO "   • Prometheus: http://prometheus.$PIHOLE_DOMAIN:9090"
        log INFO "   • Pi-hole: http://pihole.$PIHOLE_DOMAIN/admin"
    else
        log WARN "Pi-hole setup completed with some issues - check logs"
    fi
    
    return 0
}

# Function to check Pi-hole status
check_pihole_status() {
    local pihole_ip="$1"
    
    ssh_exec "$pihole_ip" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
        echo '=== Pi-hole Status ==='
        sudo pihole status
        echo
        echo '=== Pi-hole Query Stats ==='
        sudo pihole -c -e
        echo
        echo '=== Top Domains ==='
        sudo pihole -t 5
    "
}

# Function to add custom DNS entry
add_dns_entry() {
    local pihole_ip="$1"
    local ip_address="$2"
    local hostname="$3"
    local domain="${4:-$PIHOLE_DOMAIN}"
    
    ssh_exec "$pihole_ip" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
        echo '$ip_address $hostname.$domain $hostname' | sudo tee -a /etc/pihole/custom.list >/dev/null
        sudo pihole restartdns
        echo 'DNS entry added: $hostname.$domain → $ip_address'
    "
}

# Function to remove Pi-hole (cleanup)
remove_pihole_dns() {
    local pi_ips=("$@")
    local pihole_host="${PIHOLE_SERVER_IP:-${pi_ips[0]}}"
    
    log INFO "🗑️  Removing Pi-hole DNS configuration..."
    
    # Restore original DNS configuration on all Pis
    for pi_ip in "${pi_ips[@]}"; do
        ssh_exec "$pi_ip" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
            # Make resolv.conf mutable again
            sudo chattr -i /etc/resolv.conf 2>/dev/null || true
            
            # Restore backup if available
            if [[ -f /etc/resolv.conf.backup-* ]]; then
                sudo cp /etc/resolv.conf.backup-* /etc/resolv.conf
            else
                # Fallback to default configuration
                echo 'nameserver 1.1.1.1' | sudo tee /etc/resolv.conf >/dev/null
                echo 'nameserver 8.8.8.8' | sudo tee -a /etc/resolv.conf >/dev/null
            fi
        " || log WARN "Failed to restore DNS on $pi_ip"
    done
    
    # Uninstall Pi-hole
    ssh_exec "$pihole_host" "$NODES_DEFAULT_USER" "$NODES_DEFAULT_PASS" "
        sudo pihole uninstall --unattended 2>/dev/null || true
    " || log WARN "Failed to uninstall Pi-hole"
    
    log INFO "✅ Pi-hole DNS configuration removed"
}
